#ifndef POST_FILE_HPP
#define POST_FILE_HPP

#include <vector>
#include <string>

//---------------------------------------------------------------------------
//
// Copyright (c) Parallel and Cloud Computing Laboratory (PC2Lab)
// Miami University, Oxford, OH.
// All rights reserved.
//
// PC2Lab and Miami University (MU) make no representations or
// warranties about the suitability of the software, either express or
// implied, including but not limited to the implied warranties of
// merchantability, fitness for a particular purpose, or
// non-infringement.  PC2Lab or MU shall not be liable for any damages
// suffered by licensee as a result of using, result of using,
// modifying or distributing this software or its derivatives.
//
// By using or copying this Software, Licensee agrees to abide by the
// intellectual property laws, and all other applicable laws of the
// U.S., and the terms of this license.
//
// Authors: Dhananjai M. Rao       raodm@muohio.edu
//
//---------------------------------------------------------------------------

// Shortcut for a byte
typedef unsigned char byte;

/** A simple class to encapsulate data from a multi-part POST request.

    \note The primary interface method is the static
    PostFile::loadPostData() method.
    
    Typically HTTP POST requests are associated with processing HTML
    forms where the user may submit different types of data in
    multiple fields.  This file class encapsulates values for a single
    field.  The data for this class is typically loaded from an input
    stream associated by Apache (via CGI/FASTCgi) with a HTTP POST
    request.  The format of a post entry must be compatible with RFC
    standards.  Here is a simple example:

    <pre>
    <!DOCTYPE html>
    <html>
    <body>

    <form action="cgi-bin/post_test" method="post"
          enctype="multipart/form-data">
        Select file to upload:
        <input type="file" name="fileToUpload" id="fileToUpload"/>
        <input type="submit" value="Upload" name="submit"/>
    </form>

    </body>
    </html> 
    </pre>

    Here is the POST data generated by a standard web browser:
    
    <pre>
    -----------------------------198994908615659096011560184689^M
    Content-Disposition: form-data; name="fileToUpload"; filename="test.txt"^M
    Content-Type: text/x-csrc^M
    ^M
    This is a short text file uploaded for testing.

    ^M
    -----------------------------198994908615659096011560184689^M
    Content-Disposition: form-data; name="submit"^M
    ^M
    Upload^M
    -----------------------------198994908615659096011560184689--^M
    </pre>
*/
class PostFile {
public:
    /** The top-level convenience method to load data for this post
        data entry object.

        \param[in] is The input stream from where the data is to be
        loaded.  The input stream is assumed to point to the beginning
        of the first HTTP header for this multi-part post entry.

        \param[in] boundary The mime boundary (aka spearator) string
        to be used to determine end of this multi-part entry.

        \param[in] storeDir An optional directory into which files
        (supplied by the user as input) is to be stored.  If this
        string is empty then all file data is stored in the data
        vector.  If this string is not empty then files are stored on
        directories created on disk.
    */
    bool load(std::istream& is, const std::string& boundary,
              const std::string& storeDir = "");

    /** The helper method in this class to process data from a POST
        request and store it in individual HttpPostEntry objects.

        This method is a top-level helper method that can be used to
        process data from a HTTP POST request to create convenient
        objects for further processing.  This method uses the
        PostFile::load() method to load data into each object.

        \param[in] is The input stream from where the POST data is to
        be processed.  This input stream must start at the first
        character of the first multi-part boundary string for the POST
        data.

        \param[in] storeDir An optional directory into which files
        (supplied by the user as input) is to be stored.  If this
        string is empty then all input is stored in the corresponding
        PostFile::data vector.  If this string is not empty then
        files are stored on directories created on disk.  The actual
        storing operation is performed by PostFile::load() method.
    */
    static std::vector<PostFile>
    loadPostData(std::istream& is, const std::string& storeDir = "");

    /**
     * Getter method to return the vector that contains the data of
     * the post file.
    */
    std::vector<byte> get_data() const;

   /**
    * Getter method to return the name of the form element that
    * the file was attached to in the HTML form.
   */
    std::string get_name() const;

  /**
   * Getter method to return the content-type of the Post file
   * request.
  */
    std::string get_content_type() const;

 /**
  * Getter method to return the name of the file name.
 */
    std::string get_file_name() const;

private:
    /** Helper method to parse a given field out of a given HTTP header.

        This is an internal convenience method that is used to parse
        out name="value" pairs from an HTTP header of the form:
        <pre>
        Content-Disposition: form-data; name="file"; filename="test.txt"^M
        </pre>

        \param[in] header The complete header line from which a value
        is to be extracted.q

        \param[in] field The field (or name) of the parameter to be
        extracted.

        \return The value (without doublequotes) for the given field,
        if it was found.  Otherwise this method returns an empty
        string.
    */
    std::string getHeaderVal(const std::string& header,
                             std::string field) const;

    /** Convenience method to load headers and set up various instance
        variables.

        This is a convenience method that is invoked from the load()
        method to load and process HTTP headers for this post entry.
        This method reads HTTP headers (until a blank-line is
        encountered) and based on the header "Content-Disposition" or
        "Content-Type" sets values in instance variables in this
        object.

        \param[in] is The input stream from where the data is to be
        loaded.  The input stream is assumed to point to the beginning
        of the first HTTP header for this multi-part post entry.
    */
    void loadHeaders(std::istream& is);

    /** Convenience method to either write data to a file or append to
        data.

        This is a convenience method that is is invoked from the load
        method.  This method performs one of the following tasks:
        <ol>
        
        <li>If the output stream (os) is good, the input data is
        written to the output stream.</li>

        <li>Otherwise, the input is appended to the data vector in
        this object.</li>
        </ol>

        \param[in] input The data to be stored.

        \param[out] os The potential otuput stream to which data is to
        be written.

        \param[in] skipLast Optional parameter to indicate how many
        bytes from the last to skip (if any).
    */
    void storeData(const std::string& input, std::ostream& os,
                   int skipLast = 0);

    /** The actual data associated with this post entry.  Note the
        following exception: If the entry is for a file, and a
        temporary directory was specified in load, then data is
        written to a file in the temproary directory and not stored in
        this vector.  That way a large file does not need to be held
        in memory until it is really needed.
    */
    std::vector<byte> m_data;

    /** The name set for the mime field in the HTML form */
    std::string m_name;

    /** The content type for this field.  The default content-type is
        is set to text/plain (as per RFC 822). */
    std::string m_contentType;

    /** The file name (if any) associated with this field.  The file
        name is valid only if the HTML form involved an input of type
        file as shown below:

        <pre>
        <input type="file" name="fileToUpload" id="fileToUpload"/>
        </pre>
     */
    std::string m_filename;
};

#endif
